buildscript {
	repositories {
		// make it easy to test a snapshot version of goomph
		maven {	url 'https://oss.sonatype.org/content/repositories/snapshots/' }
		// grab dependencies from the gradle plugin portal
		maven { url 'https://plugins.gradle.org/m2/' }
	}
	// make sure we don't cache stale snapshot versions
	configurations.all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}
	dependencies {
		// a bunch of eclipse stuff
		classpath "com.diffplug.gradle:goomph:${VER_GOOMPH}"
		// creates a targetplatform
		classpath "org.standardout:bnd-platform:${VER_BND_PLATFORM}"
		// apply spotless
		classpath "com.diffplug.spotless:spotless-plugin-gradle:${VER_SPOTLESS}"
	}
}

///////////
// MAVEN //
///////////
repositories {
	mavenCentral()
}

apply from: rootProject.file('gradle/spotless/spotless.gradle')
subprojects {
	apply from: rootProject.file('gradle/spotless/spotless.gradle')
	repositories {
		mavenCentral()
		// SNAPSHOT versions are free to rely on other SNAPSHOT libraries
		if (project.version.endsWith('SNAPSHOT')) {
			maven {
				url 'https://oss.sonatype.org/content/repositories/snapshots/'
			}
		}
		// local eclipse maven (created by Goomph)
		maven {
			url rootProject.file('target.p2/build/p2asmaven/maven')
			metadataSources {
				mavenPom()
				artifact()
			}
		}
	}
}

/////////////
// PLUGINS //
/////////////
// tasks to clean and jar all of the plugins
Closure IS_PLUGIN = { it.name.startsWith('com.diffplug') }
configure(subprojects.findAll(IS_PLUGIN)) {
	// we need the maven repo from p2
	evaluationDependsOn(':target.p2')

	def PROJECT_NAME = it.name

	//////////
	// JAVA //
	//////////
	apply plugin: 'java'
	sourceSets {
		main { java {
			srcDir 'src'
		} }
		test { java {
			srcDir 'test'
		} }
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_11
		targetCompatibility = JavaVersion.VERSION_11
		toolchain { languageVersion = JavaLanguageVersion.of(11) } 
	}
	
	// add SWT and the appropriate platform-native SWT for building and testing
	dependencies {
		implementation "eclipse-deps:org.eclipse.swt:+"
		implementation "eclipse-deps:org.eclipse.swt.${com.diffplug.common.swt.os.SwtPlatform.getNative()}:+"
	}

	//////////
	// OSGI //
	//////////
	// create the manifest
	apply plugin: 'com.diffplug.osgi.bndmanifest'
	osgiBndManifest {
		copyTo 'META-INF/MANIFEST.MF'
	}
	// configure the OSGi bundle
	jar.manifest.attributes(
		'-exportcontents': 'com.diffplug.*',
		'-removeheaders': 'Bnd-LastModified,Bundle-Name,Created-By,Tool,Private-Package,Require-Capability',
		'Import-Package': '!javax.annotation.*,*',
		'Bundle-SymbolicName': project.name,
		'Bundle-RequiredExecutionEnvironment': 'JavaSE-11',
		'Require-Capability': 'osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=11))"',
		'Bundle-Vendor': 'DiffPlug',
		'Bundle-License': "http://www.apache.org/licenses/LICENSE-2.0"
	)

	//////////////////////
	// ECLIPSE PROJECTS //
	//////////////////////
	apply plugin: 'eclipse'
	// remove the build folder
	apply plugin: 'com.diffplug.eclipse.excludebuildfolder'
	// improve the project deps
	apply plugin: 'com.diffplug.eclipse.projectdeps'
	// handle build.properties correctly
	apply plugin: 'com.diffplug.eclipse.buildproperties'

	eclipse {
		project {
			natures 'org.eclipse.pde.PluginNature'
			natures 'org.eclipse.jdt.core.javanature'

			buildCommand 'org.eclipse.jdt.core.javabuilder'
			buildCommand 'org.eclipse.pde.ManifestBuilder'
			buildCommand 'org.eclipse.pde.SchemaBuilder'
		}
		classpath {
			downloadSources true
			downloadJavadoc true
		}
		jdt {
			sourceCompatibility "11"
			targetCompatibility "11"
		}
	}
	// always create "fresh" projects
	tasks.eclipse.dependsOn(cleanEclipse)
}

/////////////////////////////////////////////////////////
// Root eclipse project for tinkering with build files //
/////////////////////////////////////////////////////////
apply plugin: 'com.diffplug.eclipse.resourcefilters'
eclipseResourceFilters {
	exclude().folders().name('com.diffplug.*')
}


/////////////////////////////
// Setup a headless launch //
/////////////////////////////
apply plugin: 'com.diffplug.osgi.equinoxlaunch'
equinoxLaunch {
	codegenSetup {
		source.addProject(project(':com.diffplug.rcpdemo'))
		source.addMaven('com.google.guava:guava:17.0')
		source.addMaven('com.google.guava:guava:18.0')
	}
}
